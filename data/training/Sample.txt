Here's the proposed database schema for the voting app

Relationships:

    users and participants have a one-to-one relationship. A user can be a participant, but a participant must be a user.
    users and votes have a one-to-many relationship. A user can cast multiple votes.
    participants and votes have a many-to-many relationship. A participant can receive multiple votes, and a vote can be cast for multiple participants.

Note:

    The is_also_participant flag in the users table can be used to identify users who are also participants.
    The vote_for column in the votes table stores the participant_id of the participant the user voted for


CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT,
    category VARCHAR(50),
    is_also_participant BOOLEAN DEFAULT FALSE
);

-- id: Unique identifier for the user
-- name: User's full name
-- age: User's age
-- category: User's category (e.g., student, faculty, staff)
-- is_also_participant: Indicates whether the user is also a participant in the voting

CREATE TABLE participants (
    id INT PRIMARY KEY AUTO_INCREMENT,
    participant_name VARCHAR(100) NOT NULL,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- id: Unique identifier for the participant
-- participant_name: Participant's name
-- user_id: Foreign key referencing the user_id in the `users` table

CREATE TABLE votes (
    sno INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    vote_for INT,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (vote_for) REFERENCES participants(id)
);

-- sno: Serial number of the vote
-- user_id: Foreign key referencing the user_id in the `users` table
-- vote_for: Foreign key referencing the participant_id in the `participants` table